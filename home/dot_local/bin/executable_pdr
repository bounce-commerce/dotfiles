#!/bin/sh

_COLOR_BLUE="\033[0;34m"
_COLOR_BOLD="\033[1m"
_COLOR_GREEN="\033[0;32m"
_COLOR_RED="\033[0;31m"
_COLOR_RESET="\033[0;0m"
_COLOR_YELLOW="\033[1;33m"
_COLOR_UNDERLINE="\033[4m"
_COLOR_BLINK="\033[5m"
_COLOR_INVERSE="\033[7m"

_COLOR_BLACK="\033[0;30m"
_COLOR_BROWN="\033[0;33m"
_COLOR_MAGENTA="\033[0;35m"
_COLOR_CYAN="\033[0;36m"
_COLOR_LIGHT_GRAY="\033[0;37m"

_COLOR_DARK_GRAY="\033[1;30m"
_COLOR_LIGHT_RED="\033[1;31m"
_COLOR_LIGHT_GREEN="\033[1;32m"
_COLOR_LIGHT_BLUE="\033[1;34m"
_COLOR_LIGHT_MAGENTA="\033[1;35m"
_COLOR_LIGHT_CYAN="\033[1;36m"
_COLOR_WHITE="\033[1;37m"

_COLOR_BG_BLACK="\033[40m"
_COLOR_BG_RED="\033[41m"
_COLOR_BG_GREEN="\033[42m"
_COLOR_BG_BROWN="\033[43m"
_COLOR_BG_BLUE="\033[44m"
_COLOR_BG_MAGENTA="\033[45m"
_COLOR_BG_CYAN="\033[46m"
_COLOR_BG_LIGHT_GRAY="\033[47m"

_GIT_BIN=/usr/local/bin/git
_INFRASTRUCTURE_JAIL="131"
_INFRASTRUCTURE_LIST="/usr/local/etc/poudriere.d/ports-list/infrastructure"
_INFRASTRUCTURE_PORTS="head"
_INFRASTRUCTURE_SET="infrastructure"
_KARA_JAIL="123"
_KARA_LIST="/usr/local/etc/poudriere.d/ports-list/Kara"
_KARA_PORTS="quarterly"
_KARA_SET="Kara"
_MAIL_JAIL="121"
_MAIL_LIST="/usr/local/etc/poudriere.d/ports-list/Mail"
_MAIL_PORTS="quarterly"
_MAIL_SET="Mail"
_POUDRIERE_BIN="/usr/local/bin/poudriere"
_PORTSDIR="/usr/local/poudriere/ports/head"
_PORTSLISTDIR="/usr/local/etc/poudriere.d/ports-list"
_TEST_PORTS="head"
_TEST_SET="test"
_TESTQATJAIL="123"
_TEMPLIST="/tmp/tempPHP"


# Notify message on error, but do not exit
e_notify() {
    printf "${_COLOR_RED}✖ %s${_COLOR_RESET}\n" "$@"
}

# Notify message on error and exit
e_exit() {
    e_notify "$@"
    exit 1
}

e_note() {
    printf "${_COLOR_UNDERLINE}${_COLOR_BOLD}${_COLOR_BLUE}Note:${_COLOR_RESET}  ${_COLOR_YELLOW}%s${_COLOR_RESET}\n" "$@"
}

e_info() {
    printf "${_COLOR_UNDERLINE}${_COLOR_BOLD}${_COLOR_BLUE}Info:${_COLOR_RESET}  ${_COLOR_YELLOW}%s${_COLOR_RESET}\n" "$@"
}

e_warning() {
    printf "${_COLOR_YELLOW}➜ %s${_COLOR_RESET}\n" "$@"
}

usage() {
    cat << EOF
pdr is an helper script for ports developers.

Usage:
  pdr [args] [TARGET]

Available Commands:
  -p                    Build ports that are php* ports
  -P                    Build ports that are consumers of php ports
  -i                    Build ports that are required by infrastructure
  -k                    Build ports that are required by Kara
  -m                    Build ports that are required by Mail
  -a                    Build all equivalent to -p -i
  -t [TARGET]           Test [TARGET] port for php* ports
  -T [TARGET]           Test [TARGET] port for php* consumer ports
  help or -h or --help  Print this message

EOF
    exit 1
}

generate_ports_list() {
    ${_PORTGREP_BIN} -R /usr/local/poudriere/ports/default -o -m bofh@FreeBSD.org -O tz@FreeBSD.org > "$_TMPFILE"
    find $_PORTSDIR -type d -d 2 \( -iname "*php74*" -o -iname "*php80*" -o -iname "*php81*" -o -iname "*php82*" \) | sed -e "s|$_PORTSDIR/||g" >> "$_TMPFILE"
    ${_SORT_BIN} "$_TMPFILE" > "$_PORTSLIST"
}

update_tree() {
    e_warning "UPDATE quarterly portstree"
    cd /usr/local/poudriere/ports/quarterly || return
    ${_GIT_BIN} stash && ${_GIT_BIN} pull && ${_GIT_BIN} stash pop

    e_warning "UPDATE head portstree"
    cd ${_PORTSDIR} || return
    ${_GIT_BIN} checkout working && ${_GIT_BIN} stash
    ${_GIT_BIN} checkout main && ${_GIT_BIN} pull --ff-only && ${_GIT_BIN} rebase main working
    ${_GIT_BIN} stash apply

    e_warning "Creating php ports list"
    find $_PORTSDIR -type d -d 2 \( -iname "*php74*" -o -iname "*php80*" -o -iname "*php81*" -o -iname "*php82*" \) | sed -e "s|$_PORTSDIR/||g" > "$_PORTSLISTDIR"/PHP

    e_warning "Creating php consumers ports list"
    portgrep -R $_PORTSDIR -u php -o | grep -v -E 'icingaweb2-module-idoreports|icingaweb2-module-pdfexport|icingaweb2-module-reporting|php74|php80|php81|php82' > $_TEMPLIST
    portgrep -R $_PORTSDIR -u pear -o >> $_TEMPLIST
    sort -u $_TEMPLIST > "$_PORTSLISTDIR"/php
    rm $_TEMPLIST
}

build_php_ports() {
    for _JAILS in 123 123i386 131 140
    do
        e_warning "Starting bulk for: $_JAILS"
        ${_POUDRIERE_BIN} bulk -j $_JAILS -t -p ${_TEST_PORTS} -z test -f "$_PORTSLISTDIR"/PHP
        e_warning "Starting pkgclean for: $_JAILS"
        ${_POUDRIERE_BIN} pkgclean -j $_JAILS -p ${_TEST_PORTS} -z test -y -f "$_PORTSLISTDIR"/PHP
        e_warning "Starting logclean for: $_JAILS"
        ${_POUDRIERE_BIN} logclean -j $_JAILS -p ${_TEST_PORTS} -z test -y 10
    done

    for _VARIANT in testDEBUG testZTS
    do
        e_warning "Starting bulk for: $_TESTQATJAIL"
        poudriere bulk -j ${_TESTQATJAIL} -t -p head -z $_VARIANT -f "$_PORTSLISTDIR"/PHP
        e_warning "Starting pkgclean for: $_TESTQATJAIL"
        poudriere pkgclean -j ${_TESTQATJAIL} -p head -z $_VARIANT -y -f "$_PORTSLISTDIR"/PHP
        e_warning "Starting logclean for: $_TESTQATJAIL"
        poudriere logclean -j ${_TESTQATJAIL} -p head -z $_VARIANT -y 10
    done
}

build_php_consumer_ports() {
    for _SETS in testPHP74 testPHP80 testPHP81 testPHP82
    do
        e_warning "Starting bulk for: $_TESTQATJAIL with $_SETS"
        ${_POUDRIERE_BIN} bulk -j $_TESTQATJAIL -p head -z $_SETS -f "$_PORTSLISTDIR"/php
        e_warning "Starting pkgclean for: $_TESTQATJAIL with $_SETS"
        ${_POUDRIERE_BIN} pkgclean -j $_TESTQATJAIL -p head -z $_SETS -y -f "$_PORTSLISTDIR"/php
        e_warning "Starting logclean for: $_TESTQATJAIL with $_SETS"
        ${_POUDRIERE_BIN} logclean -j $_TESTQATJAIL -p head -z $_SETS -y 10
    done
}

build_infrastructure() {
    for _JAILS in $_INFRASTRUCTURE_JAIL
    do
        ${_POUDRIERE_BIN} pkgclean -j $_JAILS -p head -z $_INFRASTRUCTURE_SET -y -f $_INFRASTRUCTURE_LIST
        ${_POUDRIERE_BIN} logclean -j $_JAILS -p head -z $_INFRASTRUCTURE_SET -y 30
        ${_POUDRIERE_BIN} bulk -j $_JAILS -p head -z $_INFRASTRUCTURE_SET -f $_INFRASTRUCTURE_LIST
    done
}

build_kara() {
    ${_POUDRIERE_BIN} pkgclean -j $_KARA_JAIL -p $_KARA_PORTS -z $_KARA_SET -y -f $_KARA_LIST -O BounceExperts
    ${_POUDRIERE_BIN} logclean -j $_KARA_JAIL -p $_KARA_PORTS -z $_KARA_SET -y 30 -O BounceExperts
    ${_POUDRIERE_BIN} bulk -j $_KARA_JAIL -p $_KARA_PORTS -z $_KARA_SET -f $_KARA_LIST -O BounceExperts
}

build_mail() {
    ${_POUDRIERE_BIN} pkgclean -j $_MAIL_JAIL -p $_MAIL_PORTS -z $_MAIL_SET -y -f $_MAIL_LIST
    ${_POUDRIERE_BIN} logclean -j $_MAIL_JAIL -p $_MAIL_PORTS -z $_MAIL_SET -y 30 -O BounceExperts
    ${_POUDRIERE_BIN} bulk -j $_MAIL_JAIL -p $_MAIL_PORTS -z $_MAIL_SET -f $_MAIL_LIST
}

test_ports() {
    for _JAILS in 123i386 123 131 140
    do
        ${_POUDRIERE_BIN} bulk -j $_JAILS -p head -z ${_TEST_SET} -t "$@"
    done
}

test_php_ports() {
    for _SETS in testPHP74 testPHP80 testPHP81 testPHP82
    do
        e_warning "Starting bulk for: $_TESTQATJAIL with $_SETS"
        ${_POUDRIERE_BIN} bulk -j $_TESTQATJAIL -p head -z $_SETS -t "$@"
    done
}

main() {
    [ $# -lt 1 ] && usage

    CMD=$1
    shift

    # Handle special-case commands first.
    case "${CMD}" in
    help|-h|--help)
        usage
        ;;
    -p)
        # Build ports that are php* ports
        update_tree
        build_php_ports
        ;;
    -P)
        # Build ports that are consumers of php ports
        update_tree
        build_php_consumer_ports
        ;;
    -i)
        # Build ports that are required by infrastructure
        update_tree
        build_infrastructure
        ;;
    -k)
        # Build ports that are required by Kara
        update_tree
        build_kara
        ;;
    -m)
        # Build ports that are required by Kara
        update_tree
        build_mail
        ;;
    -a)
        # Build all
        generate_ports_list
        update_tree
        build_kara
        build_mail
        build_infrastructure
        build_php_ports
        build_php_consumer_ports
        ;;
    -t)
        # Parse the target and ensure it exists.
        if [ $# -eq 0 ]; then # No target was given, so show the command's help.
            e_exit "port name not provided."
        elif [ $# -eq 1 ]; then
            TARGET="${1}"
            shift
            # Ensure the target exists. -- cwells
            if [ ! -d "${_PORTSDIR}/${TARGET%@*}" ]; then
                e_exit "[${TARGET}]: Not found."
            else
                test_ports "${TARGET}"
            fi
        else
            usage
        fi
        ;;
    -T)
        # Parse the target and ensure it exists.
        if [ $# -eq 0 ]; then # No target was given, so show the command's help.
            e_exit "port name not provided."
        elif [ $# -eq 1 ]; then
            TARGET="${1}"
            shift
            # Ensure the target exists. -- cwells
            if [ ! -d "${_PORTSDIR}/${TARGET%@*}" ]; then
                e_exit "[${TARGET}]: Not found."
            else
                test_php_ports "${TARGET}"
            fi
        else
            usage
        fi
        ;;
    *) # Filter out all non-commands
        e_notify "Illegal option ${CMD}"
        usage
        ;;
    esac
}

main "$@"
