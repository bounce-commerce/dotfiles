"***************************************************************************** "" dein core
"*****************************************************************************
if &compatible
  set nocompatible               " Be iMproved
endif

set runtimepath+=~/.local/share/dein/repos/github.com/Shougo/dein.vim,$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME

call dein#begin('~/.local/share/dein')

call dein#add('~/.local/share/dein/repos/github.com/Shougo/dein.vim')

"*****************************************************************************
"" dein install packages
"*****************************************************************************
call dein#add('preservim/nerdtree', {'on_cmd': 'NERDTreeToggle'})
"call dein#add('jistr/vim-nerdtree-tabs')
"call dein#add('tpope/vim-commentary')
"call dein#add('tpope/vim-fugitive')
call dein#add('vim-airline/vim-airline')
"call dein#add('airblade/vim-gitgutter')
"call dein#add('vim-scripts/grep.vim')
"call dein#add('vim-scripts/CSApprox')
"call dein#add('Raimondi/delimitMate')
"call dein#add('majutsushi/tagbar')
call dein#add('dense-analysis/ale')
call dein#add('Yggdroot/indentLine')
"call dein#add('editor-bootstrap/vim-bootstrap-updater')
"call dein#add('tpope/vim-rhubarb') " required by fugitive to :Gbrowse
call dein#add('arcticicestudio/nord-vim')

"if isdirectory('/usr/local/opt/fzf')
"  Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
"else
"  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
"  Plug 'junegunn/fzf.vim'
"endif
let g:make = 'gmake'
if exists('make')
        let g:make = 'make'
endif
"call dein#add('Shougo/vimproc.vim', {'do': g:make})
"
" Vim-Session
"call dein#add('xolox/vim-misc')
"call dein#add('xolox/vim-session')
"
" Snippets
"call dein#add('SirVer/ultisnips')
"call dein#add('honza/vim-snippets')
"
"*****************************************************************************
"" Custom bundles
"*****************************************************************************
" c
"call dein#add('vim-scripts/c.vim', {'for': ['c', 'cpp']})
"call dein#add('ludwig/split-manpage.vim')
"
" go
" Go Lang Bundle
" call dein#add('fatih/vim-go', {'on_ft': 'go'})
"
" haskell
"" Haskell Bundle
"call dein#add('eagletmt/neco-ghc')
"call dein#add('dag/vim2hs')
"call dein#add('pbrisbin/vim-syntax-shakespeare')
"
" html
"" HTML Bundle
"call dein#add('hail2u/vim-css3-syntax')
"call dein#add('gko/vim-coloresque')
"call dein#add('tpope/vim-haml')
"call dein#add('mattn/emmet-vim')

" lisp
"" Lisp Bundle
"call dein#add('vim-scripts/slimv.vim')

" lua
"" Lua Bundle
"call dein#add('xolox/vim-lua-ftplugin')
"call dein#add('xolox/vim-lua-inspect')

" perl
"" Perl Bundle
"call dein#add('vim-perl/vim-perl')
"call dein#add('c9s/perlomni.vim')

" php
"" PHP Bundle
"call dein#add('phpactor/phpactor', {'for': 'php', 'do': 'composer install --no-dev -o'})
"call dein#add('stephpy/vim-php-cs-fixer')

" python
"" Python Bundle
"call dein#add('davidhalter/jedi-vim')
"call dein#add('raimon49/requirements.txt.vim', {'for': 'requirements'})

" rust
" Vim racer
"call dein#add('racer-rust/vim-racer')

" Rust.vim
"call dein#add('rust-lang/rust.vim')

" Async.vim
"call dein#add('prabirshrestha/async.vim')

" Vim lsp
"call dein#add('prabirshrestha/vim-lsp')

" Asyncomplete.vim
"call dein#add('prabirshrestha/asyncomplete.vim')

" Asyncomplete lsp.vim
"call dein#add('prabirshrestha/asyncomplete-lsp.vim')

" scala
if has('python')
    " sbt-vim
"    call dein#add('ktvoelker/sbt-vim')
endif
" vim-scala
"call dein#add('derekwyatt/vim-scala')

"*****************************************************************************
"*****************************************************************************

" Include user's extra bundle
"call dein#add('jiangmiao/auto-pairs')
"call dein#add('preservim/nerdcommenter')
"call dein#add('editorconfig/editorconfig-vim')
"call dein#add('bronson/vim-trailing-whitespace', {'on_cmd': 'FixWhitespace'})
"call dein#add('jamessan/vim-gnupg', {'on_ft': 'asc'})
"call dein#add('jremmen/vim-ripgrep', {'on_cmd': 'Rg'})
"call dein#add('junegunn/vim-easy-align')
"call dein#add('sheerun/vim-polyglot')
"call dein#add('tpope/vim-repeat')
"call dein#add('tpope/vim-surround')

"if filereadable(expand("~/.rc.local.bundles"))
"  source ~/.rc.local.bundles
"endif

call dein#end()

" Environment
set directory=$XDG_CACHE_HOME/vim,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim,~/,/tmp
if !has('nvim') " Neovim has its own location which already complies with XDG specification
  set viminfofile=$XDG_CACHE_HOME/vim/viminfo
endif
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

" Required:
filetype plugin indent on

if dein#check_install()
  call dein#install()
endif

"*****************************************************************************
"" Basic Setup
"*****************************************************************************"
" Encoding
set encoding=utf-8
if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
    set fileencodings=ucs-bom,utf-8,latin1
endif
set fileencoding=utf-8
set ttyfast           " Redraw faster for smoother scrolling

" Fix backspace indent
set backspace=indent,eol,start  " Allow backspacing over anything

" Tabs. May be overridden by autocmd rules
set tabstop=4
set softtabstop=4
set shiftwidth=2
set expandtab

" Map leader to ' '
let mapleader=' '
let g:maplocalleader = ','

" Enable hidden buffers
set hidden

" Searching
set hlsearch          " Highlight search results
set incsearch         " Highlight search matches as you type them
set ignorecase
set smartcase
set showmatch
set wildmode=longest,list
set wildignore+=*/.idea/*
set wildignore+=*/.git/*
set wildignore+=*/.svn/*
set wildignore+=*/vendor/*
set wildignore+=*/node_modules/*
" will mute highlighted search results
nnoremap <silent> <Leader><space> :nohlsearch<cr>

set fileformats=unix,mac

if exists('$SHELL')
    set shell=$SHELL
else
    set shell=/bin/sh
endif

" session management
let g:session_directory = "~/./session"
let g:session_autoload = "no"
let g:session_autosave = "no"
let g:session_command_aliases = 1

"*****************************************************************************
"" Visual Settings
"*****************************************************************************
try
    syntax on         " Enable syntax highlighting
catch | endtry        " vim-tiny is installed without the syntax files
set ruler             " Show cursor position
set number relativenumber

let no_buffers_menu=1
if !empty($TMUX) || $COLORTERM == 'truecolor' || $TERM =~ '^\(tmux\|xterm\|iterm\|vte\|gnome\)\(-.*\)\?$'
    if exists('+termguicolors')
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        set termguicolors
    endif
    set background=dark
    if !exists('g:colors_name') || g:colors_name != 'nord'
        colorscheme nord
    endif
endif

set mousemodel=popup
set guioptions=egmrti
set gfn=Monospace\ 10

"if !has("gui_running")
  let g:CSApprox_loaded = 1

  " IndentLine
  let g:indentLine_enabled = 1
  let g:indentLine_concealcursor = 'inc'
  let g:indentLine_conceallevel = 2
  let g:indentLine_char_list = ['|', '¦', '┆', '┊']
  let g:indentLine_faster = 1
  let g:indentLine_setColors = 0
  let g:indentLine_color_term = 239
  let g:indentLine_color_tty_light = 7 " (default: 4)
  let g:indentLine_color_dark = 1 " (default: 2)
  " Background (Vim, GVim)
  let g:indentLine_bgcolor_term = 202
  let g:indentLine_bgcolor_gui = '#FF5F00'

"endif

if &term =~ '256color'
  set t_ut=
endif

" Disable the blinking cursor.
set gcr=a:blinkon0

set scrolloff=5

" Status bar
set laststatus=2

" Use modeline overrides
set modeline
set modelines=1

set title
set titleold="Terminal"
set titlestring=%F

set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

if exists("*fugitive#statusline")
  set statusline+=%{fugitive#statusline()}
endif

" vim-airline
let g:airline_theme = 'nord'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1

"*****************************************************************************
"" Abbreviations
"*****************************************************************************
" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

" NERDTree configuration
let NERDTreeQuitOnOpen=1
let g:NERDTreeMinimalUI=1
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 50
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
nnoremap <silent> <F2> :NERDTreeFind<CR>
nnoremap <silent> <F3> :NERDTreeToggle<CR>
nnoremap <leader>r :Rg<space>
nnoremap <leader>b :buffers<cr>

" grep.vim
nnoremap <silent> <leader>f :Rgrep<CR>
let Grep_Default_Options = '-IR'
let Grep_Skip_Files = '*.log *.db'
let Grep_Skip_Dirs = '.git node_modules'

" terminal emulation
nnoremap <silent> <leader>sh :terminal<CR>

"*****************************************************************************
"" Commands
"*****************************************************************************
" remove trailing whitespaces
command! FixWhitespace :%s/\s\+$//e

"*****************************************************************************
"" Functions
"*****************************************************************************
if !exists('*s:setupWrapping')
  function s:setupWrapping()
    set wrap
    set wm=2
   set textwidth=79
  endfunction
endif

"*****************************************************************************
"" Autocmd Rules
"*****************************************************************************
" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
augroup vimrc-sync-fromstart
  autocmd!
  autocmd BufEnter * :syntax sync maxlines=200
augroup END

" Remember cursor position
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" txt
augroup vimrc-wrapping
  autocmd!
  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
augroup END

" make/cmake
augroup vimrc-make-cmake
  autocmd!
  autocmd FileType make setlocal noexpandtab
  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
augroup END

set autoread

"*****************************************************************************
"" Mappings
"*****************************************************************************

" Split
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

" Git
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Git commit --verbose<CR>
noremap <Leader>gsh :Gpush<CR>
noremap <Leader>gll :Gpull<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

" Tabs
nnoremap <Tab> gt
nnoremap <S-Tab> gT
nnoremap <silent> <S-t> :tabnew<CR>

" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" fzf.vim
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" The Silver Searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
endif

" ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>e :FZF -m<CR>
"Recovery commands from history through FZF
nmap <leader>y :History:<CR>

" snippets
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"

" ale
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'go': ['golint', 'go vet'],
\   'python': ['flake8'],
\}
let g:ale_linters = {
\   'bash': ['shellcheck'],
\   "go": ['golint', 'go vet'],
\   'python': ['flake8'],
\   'sh': ['shellcheck'],
\}

let g:ale_fix_on_save = 1

" Tagbar
nmap <silent> <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

" Copy/Paste/Cut
if has('unnamedplus')
  set clipboard^=unnamed,unnamedplus
endif

noremap YY "+y<CR>
noremap <leader>p "+gP<CR>
noremap XX "+x<CR>

if has('macunix')
  " pbcopy for OSX copy/paste
  vmap <C-x> :!pbcopy<CR>
  vmap <C-c> :w !pbcopy<CR><CR>
endif

" Buffer nav
noremap <leader>z :bp<CR>
noremap <leader>q :bp<CR>
noremap <leader>x :bn<CR>
noremap <leader>w :bn<CR>

" Close buffer
noremap <leader>c :bd<CR>

" Clean search (highlight)
nnoremap <silent> <leader><space> :noh<cr>

" Switching windows
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h

" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Open current line on GitHub
nnoremap <Leader>o :.Gbrowse<CR>
nnoremap ; :
nnoremap q: <nop>
nnoremap Q @q

" NERDCommenter
nmap <C-_> <Plug>NERDCommenterToggle
vmap <C-_> <Plug>NERDCommenterToggle<CR>gv
tnoremap <ESC> <C-\><C-n>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv
"*****************************************************************************
"" Custom configs
"*****************************************************************************

" c
autocmd FileType c setlocal tabstop=4 shiftwidth=4 expandtab
autocmd FileType cpp setlocal tabstop=4 shiftwidth=4 expandtab

" go
" vim-go
" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

let g:go_list_type = "quickfix"
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_structs = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_space_tab_error = 0
let g:go_highlight_array_whitespace_error = 0
let g:go_highlight_trailing_whitespace_error = 0
let g:go_highlight_extra_types = 1

autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4

augroup completion_preview_close
  autocmd!
  if v:version > 703 || v:version == 703 && has('patch598')
    autocmd CompleteDone * if !&previewwindow && &completeopt =~ 'preview' | silent! pclose | endif
  endif
augroup END

augroup go

  au!
  au Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  au Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  au Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  au Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

  au FileType go nmap <Leader>dd <Plug>(go-def-vertical)
  au FileType go nmap <Leader>dv <Plug>(go-doc-vertical)
  au FileType go nmap <Leader>db <Plug>(go-doc-browser)

  au FileType go nmap <leader>r  <Plug>(go-run)
  au FileType go nmap <leader>t  <Plug>(go-test)
  au FileType go nmap <Leader>gt <Plug>(go-coverage-toggle)
  au FileType go nmap <Leader>i <Plug>(go-info)
  au FileType go nmap <silent> <Leader>l <Plug>(go-metalinter)
  au FileType go nmap <C-g> :GoDecls<cr>
  au FileType go nmap <leader>dr :GoDeclsDir<cr>
  au FileType go imap <C-g> <esc>:<C-u>GoDecls<cr>
  au FileType go imap <leader>dr <esc>:<C-u>GoDeclsDir<cr>
  au FileType go nmap <leader>rb :<C-u>call <SID>build_go_files()<CR>

augroup END

" haskell
let g:haskell_conceal_wide = 1
let g:haskell_multiline_strings = 1
let g:necoghc_enable_detailed_browse = 1
autocmd Filetype haskell setlocal omnifunc=necoghc#omnifunc


" html
" for html files, 2 spaces
autocmd Filetype html setlocal ts=2 sw=2 expandtab


" lisp


" lua


" perl


" php
" Phpactor plugin
" Include use statement
nmap <Leader>u :call phpactor#UseAdd()<CR>
" Invoke the context menu
nmap <Leader>mm :call phpactor#ContextMenu()<CR>
" Invoke the navigation menu
nmap <Leader>nn :call phpactor#Navigate()<CR>
" Goto definition of class or class member under the cursor
nmap <Leader>oo :call phpactor#GotoDefinition()<CR>
nmap <Leader>oh :call phpactor#GotoDefinitionHsplit()<CR>
nmap <Leader>ov :call phpactor#GotoDefinitionVsplit()<CR>
nmap <Leader>ot :call phpactor#GotoDefinitionTab()<CR>
" Show brief information about the symbol under the cursor
nmap <Leader>K :call phpactor#Hover()<CR>
" Transform the classes in the current file
nmap <Leader>tt :call phpactor#Transform()<CR>
" Generate a new class (replacing the current file)
nmap <Leader>cc :call phpactor#ClassNew()<CR>
" Extract expression (normal mode)
nmap <silent><Leader>ee :call phpactor#ExtractExpression(v:false)<CR>
" Extract expression from selection
vmap <silent><Leader>ee :<C-U>call phpactor#ExtractExpression(v:true)<CR>
" Extract method from selection
vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>


" python
" vim-python
augroup vimrc-python
  autocmd!
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
      \ formatoptions+=croq softtabstop=4
      \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
augroup END

" jedi-vim
let g:jedi#popup_on_dot = 0
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#rename_command = "<leader>r"
let g:jedi#show_call_signatures = "0"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#smart_auto_mappings = 0

" vim-airline
let g:airline#extensions#virtualenv#enabled = 1

" Syntax highlight
let python_highlight_all = 1

" rust
" Vim racer
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)

"*****************************************************************************
"" Convenience variables
"*****************************************************************************

" vim-airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

if !exists('g:airline_powerline_fonts')
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_left_sep          = '▶'
  let g:airline_left_alt_sep      = '»'
  let g:airline_right_sep         = '◀'
  let g:airline_right_alt_sep     = '«'
  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
  let g:airline#extensions#readonly#symbol   = '⊘'
  let g:airline#extensions#linecolumn#prefix = '¶'
  let g:airline#extensions#paste#symbol      = 'ρ'
  let g:airline_symbols.linenr    = '␊'
  let g:airline_symbols.branch    = '⎇'
  let g:airline_symbols.paste     = 'ρ'
  let g:airline_symbols.paste     = 'Þ'
  let g:airline_symbols.paste     = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
else
  let g:airline#extensions#tabline#left_sep = ''
  let g:airline#extensions#tabline#left_alt_sep = ''

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
endif

set nobackup
set autoindent        " Intelligent indentation matching
set completeopt=longest,menuone
set foldlevelstart=20
set foldmethod=syntax
set linebreak
set mouse=a
set nobackup
set nolist
set noswapfile
set nowrap
set nowritebackup
set path+=**
set shortmess+=c
set sidescrolloff=5
set smartindent
set splitbelow
set splitright
set synmaxcol=500
set textwidth=0
set timeoutlen=300
set updatetime=300
set wrapmargin=0

let g:netrw_altv = 1
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_liststyle = 3
let g:netrw_winsize = 20

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

set wildmenu          " Show menu for tab completion in command mode
let g:is_posix = 1    " Our /bin/sh is POSIX, not bash
set belloff=all       " Turn off bells
set display=truncate  " Show '@@@' when the last screen line overflows
set formatoptions+=j  " Delete comment char when joining lines
set history=100       " Undo up to this many commands
