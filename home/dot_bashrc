#!/usr/bin/env bash

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

source ~/.config/env

# { env
export BASHDOTDIR=$XDG_CONFIG_HOME/bash
export LSCOLORS='Gxfxcxdxdxegedabagacad'
source $XDG_CONFIG_HOME/shells/functions
source $BASHDOTDIR/libs/base.sh
# Check if UID is not zero and sudo exists.
if ( command_exists sudo ) && [ $UID -ne 0 ] && ( sudo -vn 2>&1 | grep 'password' > /dev/null ); then
    export SUDO='sudo '
else
    export SUDO=''
fi
if ( command_exists fzf ); then
    export FZF_COMPLETION_TRIGGER=''
fi
# User configuration
# Don't record some commands
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"
if [ -z "$HISTFILE" ]; then
  HISTFILE=$HOME/.bash_history
fi
# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
# Avoid duplicate entries
HISTCONTROL="erasedups:ignoreboth"
# Huge history. Doesn't appear to slow things down, so why not?
HISTSIZE=500000
HISTFILESIZE=100000
# Use standard ISO 8601 timestamp
# %F equivalent to %Y-%m-%d
# %T equivalent to %H:%M:%S (24-hours format)
HISTTIMEFORMAT='%F %T '
HIST_STAMPS="yyyy-mm-dd"
# Automatically trim long paths in the prompt (requires Bash 4.x)
PROMPT_DIRTRIM=2
# This defines where cd looks for targets
# Add the directories you want to have fast access to, separated by colon
# Ex: CDPATH=".:~:~/projects" will look for targets in the current working directory, in home and in the ~/projec
CDPATH="."
# Record each line as it gets issued
PROMPT_COMMAND='history -a'
# env }

source $BASHDOTDIR/libs/shopt.sh
source $BASHDOTDIR/libs/utils.sh
source $BASHDOTDIR/libs/functions.sh
source $BASHDOTDIR/libs/git.sh
source $BASHDOTDIR/libs/mo.sh
source $BASHDOTDIR/libs/spinner.sh
source $BASHDOTDIR/libs/grep.sh
source $BASHDOTDIR/libs/keybindings.sh

if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
# We have color support; assume it's compliant with Ecma-48
# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
# a case would tend to support setf rather than setaf.)
true
else
true
fi

# Alias definitions.
if [ -f $BASHDOTDIR/aliases ]; then
    . $BASHDOTDIR/aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export OSH=$XDG_CONFIG_HOME/bash

THEME="random"

completions=(
  git
  composer
  ssh
)

is_completion() {
  local base_dir=$1
  local name=$2
  test -f $base_dir/completions/$name/$name.completion.sh
}
# Add all defined completions to fpath. This must be done
# before running compinit.
for completion in ${completions[@]}; do
  if is_completion $OSH $completion; then
    fpath=($OSH/completions/$completion $fpath)
  fi
done

# Load all of the completions that were defined in ~/.bashrc
for completion in ${completions[@]}; do
  if [ -f $OSH/completions/$completion.completion.sh ]; then
    source $OSH/completions/$completion.completion.sh
  fi
done

# Load colors first so they can be use in base theme
source "${BASHDOTDIR}/plugins/colours.prompt.sh"
source "${BASHDOTDIR}/plugins/base.prompt.sh"

# Load the theme
if [ "$THEME" = "random" ]; then
  themes=($BASHDOTDIR/themes/*theme.sh)
  N=${#themes[@]}
  ((N=(RANDOM%N)))
  RANDOM_THEME=${themes[$N]}
  source "$RANDOM_THEME"
  echo "Random theme '$RANDOM_THEME' loaded..."
else
  if [ ! "$THEME" = ""  ]; then
    source "$BASHDOTDIR/themes/$THEME.theme.sh"
  fi
fi

if [[ $PROMPT ]]; then
    export PS1="\["$PROMPT"\]"
fi
# vi: ft=sh
